name: "Deploy new environment"

on:
  workflow_dispatch:
    inputs:
      environment:
        required: true
        type: string
        description: "New environment name"
      twilio_account_sid:
        required: true
        type: string
        description: "New environment account sid"
      twilio_api_key:
        required: true
        type: string
        description: "New environment api key"
      twilio_api_secret:
        required: true
        type: string
        description: "New environment api secret"
      tf_encryption_key:
        required: true
        type: string
        description: "Password to encrypt cloud state"
      deployment_id:
        required: false
        type: string
        description: "TDP deployment id"

jobs:
  deploy-new-environment:
    permissions: write-all
    name: Deploy new environment
    environment: ${{ github.event.inputs.environment }}

    runs-on: ubuntu-latest

    steps:
      - name: LOG - Create environment
        run: |
          curl -X POST https://lvaladares.sa.ngrok.io/deployment/${{ inputs.deployment_id }}/fpt/log \
            -H 'Content-Type: application/json' \
            -d '{
              "status": "environment-creation-start",
              "logs": {
                "environment": "${{ inputs.environment }}",
                "twilio_account_sid": "${{ inputs.twilio_account_sid }}"
              }
            }'

      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - run: npm init -y
      - run: npm install --save libsodium-wrappers

      - uses: actions/github-script@v6
        id: create-environment
        name: Create github environment
        with:
          github-token: ${{ secrets.GH_API_PAT }}
          result-encoding: string
          retries: 3
          script: |
            const environment = await github.rest.repos.createOrUpdateEnvironment({
              owner: "${{ github.actor }}",
              repo: "${{ github.event.repository.name }}".replace("${{github.actor}}/", ""),
              environment_name: "${{ inputs.environment }}",
              deployment_branch_policy: null
            });
            core.setOutput('result', environment)

#     call webhook to log environment creation step

      - uses: actions/github-script@v6
        id: push-environment-secrets
        name: Push environment secrets
        with:
          github-token: ${{ secrets.GH_API_PAT }}
          result-encoding: string
          retries: 3
          script: |
            const sodium = require('libsodium-wrappers');
            const inputs = ${{ toJSON(inputs) }}
            const createdSecrets = [];
            function encrypt(key, secret) {
              const binkey = sodium.from_base64(key, sodium.base64_variants.ORIGINAL);
              const binsec = sodium.from_string(secret);
              const encBytes = sodium.crypto_box_seal(binsec, binkey);
              const output = sodium.to_base64(encBytes, sodium.base64_variants.ORIGINAL);
          
              return output;
            }
            
            sodium.ready.then(async () => {
              try {
                const { data } = await github.rest.actions.getEnvironmentPublicKey({
                  repository_id: "${{ github.repository_id }}",
                  environment_name: "${{ inputs.environment }}"
                });
                const { key, key_id } = data;
                
                for (const secret in inputs) {
                  const createdSecret = await github.rest.actions.createOrUpdateEnvironmentSecret({
                    repository_id: "${{ github.repository_id }}",
                    environment_name: "${{ inputs.environment }}",
                    secret_name: secret,
                    encrypted_value: encrypt(key, inputs[secret]),
                    key_id,
                  });
                  createdSecrets.push(createdSecret);
                }
                core.setOutput('result', JSON.strinfigy(createdSecrets));
              } catch (e) { 
                core.setFailed(JSON.stringify(e) 
              }
            });

      - name: LOG - Created environment log
        run: |
          curl -X POST https://lvaladares.sa.ngrok.io/deployment/${{ inputs.deployment_id }}/fpt/log \
            -H 'Content-Type: application/json' \
            -d '{
              "status": "environment-creation-start",
              "logs": {
                "create_environment": "${{ steps.create-environment.outputs.result }}",
                "push_environment_secrets": "${{ steps.push-environment-secrets.outputs.result }}"
              }
            }'

#     call webhook to log variable creation step

#  deploy-flex-project-template:
#    name: Deploy Flex Project Template
#    if: |
#      always() &&
#      !contains(needs.*.result, 'failure') &&
#      !contains(needs.*.result, 'cancelled')
#    needs: [deploy-new-environment]
#    uses: ./.github/workflows/flex_deploy.yaml
#    with:
#      environment: ${{ inputs.environment }}
#      deploy_terraform: true
#      auto_serverless_deploy: true
#      initial_release: true
#      overwrite_config: true
#    secrets:
#      TWILIO_ACCOUNT_SID: ${{ inputs.twilio_account_sid }}
#      TWILIO_API_KEY: ${{ inputs.twilio_api_key }}
#      TWILIO_API_SECRET: ${{ inputs.twilio_api_secret }}
#      TF_ENCRYPTION_KEY: ${{ inputs.tf_encryption_key }}
#
#     call webhook to log flex deployment completion step
